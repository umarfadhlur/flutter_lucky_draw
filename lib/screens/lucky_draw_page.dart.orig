import 'dart:convert';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_lucky_draw/screens/prize_category_page.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LuckyDrawPage extends StatefulWidget {
  final String category;

  const LuckyDrawPage({super.key, required this.category});

  @override
  LuckyDrawPageState createState() => LuckyDrawPageState();
}

class LuckyDrawPageState extends State<LuckyDrawPage>
    with SingleTickerProviderStateMixin {
  List<String> _participants = [];
  String _winner = '';
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _loadParticipants();

    _controller = AnimationController(
      duration: const Duration(seconds: 5),
      vsync: this,
    );

    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
  }

  Future<void> _loadParticipants() async {
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      List<String>? storedParticipants = prefs.getStringList('participants');
      if (storedParticipants != null) {
        setState(() {
          _participants = storedParticipants;
        });
      }
    } catch (e) {
      if (kDebugMode) {
        print("Error loading participants: $e");
      }
    }
  }

  void _pickWinner() {
    if (_participants.isNotEmpty) {
      _controller.forward().then((_) {
        final random = Random();
        int winnerIndex = random.nextInt(_participants.length);
        _winner = _participants[winnerIndex];
        String prize = widget.category;
        _participants.removeAt(winnerIndex);
        _saveParticipants();
        _saveWinner(_winner, prize);
        _showWinnerPopup(_winner, prize);
        _controller.reset();
      });
    }
  }

  Future<void> _saveWinner(String winner, String prize) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String>? winnersList = prefs.getStringList('winners') ?? [];

    Map<String, String> winnerData = {
      'winner': winner,
      'prize': prize,
    };

    winnersList.add(jsonEncode(winnerData));
    await prefs.setStringList('winners', winnersList);
  }

  void _showWinnerPopup(String winner, String prize) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Pemenang!'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Peserta: $winner'),
              Text('Hadiah: $prize'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('Tutup'),
            ),
          ],
        );
      },
    );
  }

  Future<void> _saveParticipants() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.setStringList('participants', _participants);
  }

  Future<bool> _onWillPop() async {
    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(builder: (context) => const PrizeCategoryPage()),
      (Route<dynamic> route) => false,
    );
    return false;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        appBar: AppBar(
          title: Text('Undian ${widget.category}'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Center(
            child: GestureDetector(
              onTap: _participants.isEmpty ? null : _pickWinner,
              child: Wheel(
                participants: _participants,
                animation: _animation,
                colors: _generateColors(_participants.length),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

List<Color> _generateColors(int count) {
  final Random random = Random();
  return List.generate(count, (index) {
    return Color.fromARGB(
      255,
      random.nextInt(256),
      random.nextInt(256),
      random.nextInt(256),
    );
  });
}

class Wheel extends StatelessWidget {
  final List<String> participants;
  final Animation<double> animation;
  final List<Color> colors;

  const Wheel({
    super.key,
    required this.participants,
    required this.animation,
    required this.colors,
  });

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: animation,
      builder: (context, child) {
        return Transform.rotate(
          angle: animation.value * 2 * pi,
          child: CustomPaint(
            size: const Size(800, 800),
            painter: WheelPainter(participants: participants, colors: colors),
          ),
        );
      },
    );
  }
}

class WheelPainter extends CustomPainter {
  final List<String> participants;
  final List<Color> colors;

  WheelPainter({required this.participants, required this.colors});

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    final radius = size.width / 2 - 20;

    for (int i = 0; i < participants.length; i++) {
      final paint = Paint()
        ..style = PaintingStyle.fill
        ..color = colors[i % colors.length];

      final startAngle = i * 2 * pi / participants.length;
      final sweepAngle = 2 * pi / participants.length;

      canvas.drawArc(
        Rect.fromCircle(center: center, radius: radius),
        startAngle,
        sweepAngle,
        true,
        paint,
      );

      final angle = startAngle + sweepAngle / 2;
      final offset = Offset(
        center.dx + (radius - 40) * cos(angle),
        center.dy + (radius - 40) * sin(angle),
      );

      final textStyle = TextStyle(
        fontSize: 16,
        color: Colors.white,
        letterSpacing: 4.0, // Added spacing to elongate text
        fontWeight: FontWeight.bold,
      );
      final textPainter = TextPainter(
        text: TextSpan(
          text: participants[i],
          style: textStyle,
        ),
        textDirection: TextDirection.ltr,
        maxLines: 1,
      );

      textPainter.layout();

      canvas.save();
      canvas.translate(offset.dx, offset.dy);
      canvas.rotate(angle + pi / 2);
      textPainter.paint(
        canvas,
        Offset(-textPainter.width / 2, -textPainter.height / 2),
      );
      canvas.restore();
    }

    final borderPaint = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = 3
      ..color = Colors.black;

    canvas.drawCircle(center, radius, borderPaint);

    const spinRadius = 50.0;
    final spinPaint = Paint()
      ..color = Colors.blue
      ..style = PaintingStyle.fill;

    canvas.drawCircle(center, spinRadius, spinPaint);

    const spinTextStyle = TextStyle(
        fontSize: 20, color: Colors.white, fontWeight: FontWeight.bold);
    final spinTextPainter = TextPainter(
      text: const TextSpan(
        text: 'SPIN',
        style: spinTextStyle,
      ),
      textDirection: TextDirection.ltr,
    );

    spinTextPainter.layout();

    spinTextPainter.paint(
      canvas,
      Offset(center.dx - spinTextPainter.width / 2,
          center.dy - spinTextPainter.height / 2),
    );
  }

  @override
  bool shouldRepaint(WheelPainter oldDelegate) => true;
}
